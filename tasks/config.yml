---

- name: "Check if /usr/local/cyrus exists"
  ansible.builtin.stat:
    path: /usr/local/cyrus
  register: cyrus

- name: "Check if /etc/drbd.d/drbd.res exists"
  ansible.builtin.stat:
    path: /etc/drbd.d/drbd.res
  register: drbd_res

- name: "Check if /etc/drbd.conf exists"
  ansible.builtin.stat:
    path: /etc/drbd.conf
  register: drbd_conf

- name: "Check if /etc/drbd.d/global_common.conf exists"
  ansible.builtin.stat:
    path: /etc/drbd.d/global_common.conf
  register: global_commond

- name: "Check if /lib/systemd/system/drbd.service exists"
  ansible.builtin.stat:
    path: /lib/systemd/system/drbd.service
  register: drbd_serviced

- name: "Deploy drdb.res config file"
  ansible.builtin.template:
    src: drbd.j2
    dest: /etc/drbd.d/drbd.res
    owner: root
    group: root
    mode: "0644"
  when: not drbd_res.stat.exists

- name: "Deploy drbd.conf file"
  ansible.builtin.template:
    src: drbd.conf
    dest: /etc/drbd.conf
    owner: root
    group: root
    mode: "0644"
  when: not drbd_conf.stat.exists

- name: "Create global_common.conf"
  ansible.builtin.template:
    src: global_common.conf
    dest: /etc/drbd.d/global_common.conf
    owner: root
    group: root
    mode: "0644"
  when: not global_common.stat.exists

- name: "Copy drbd systemd startup files"
  ansible.builtin.template:
    src: drbd.service
    dest: /lib/systemd/system/drbd.service
    mode: "0644"
    owner: root
    group: root
  when: not drbd_service.stat.exists

- name: "Checking DRBD Mirror Devices Creation Status"
  ansible.builtin.stat:
    path: "/etc/drbd.d/.{{ item['resource'] }}.created"
  register: _drbd_mirror_device_creation_status
  with_items: "{{ drbd2_disks }}"

- name: "Creating DRBD Mirror Devices"
  ansible.builtin.shell:
    cmd:
      set -o pipefail
      echo "yes" | drbdadm create-md {{ item['item']['resource'] }}
    executable: /bin/bash
  become: true
  register: _drbd_mirror_device_created
  changed_when: false
  loop: "{{ _drbd_mirror_device_creation_status['results'] }}"
  when: not item['stat']['exists'] and not cyrus.stat.exists

- name: "Marking DRDB Mirror Devices Created"
  ansible.builtin.file:
    path: "/etc/drbd.d/.{{ item['item']['item']['resource'] }}.created"
    state: touch
    owner: root
    group: root
    mode: "0644"
  become: true
  with_items: "{{ _drbd_mirror_device_created['results'] }}"
  when: item['changed'] and not cyrus.stat.exists

- name: "Bringing DRBD Mirror Devices Up"
  ansible.builtin.command: drbdadm up {{ item['resource'] }}
  become: true
  register: _drbd_mirror_device_up
  with_items: "{{ drbd2_disks}}"
  when: >
        _drbd_mirror_device_created['changed'] and not cyrus.stat.exists

- name: "Defining DRBD Primary"
  ansible.builtin.command: drbdadm -- --overwrite-data-of-peer primary {{ item['resource'] }}/0
  become: true
  register: _drbd_primary
  with_items: "{{ drbd2_disks }}"
  when: >
        _drbd_mirror_device_up['changed'] and
        drbd2_master and not cyrus.stat.exists

- name: "Waiting For DRBD Sync To Complete"
  ansible.builtin.command: drbd-overview
  become: true
  register: _drbd_sync
  until: ('Inconsistent' not in _drbd_sync['stdout'])
  retries: 100
  delay: 30
  when: >
        _drbd_primary['changed'] and
        drbd2_master and not cyrus.stat.exists

- name: "Partitioning DRBD Device"
  ansible.builtin.filesystem:
    fstype: "{{ item['filesystem'] }}"
    dev: "{{ item['device'] }}"
  become: true
  with_items: "{{ drbd2_disks }}"
  when: >
        drbd2_master and
        _drbd_sync['changed'] and not cyrus.stat.exists

- name: "Creating DRBD Mountpoint"
  ansible.builtin.file:
    path: "{{ item['mountpoint'] }}"
    state: directory
  become: true
  with_items: "{{ drbd2_disks }}"
  when: not cyrus.stat.exists

- name: "Check if drbd is mounted on /usr/local/cyrus"
  ansible.builtin.set_fact:
    drbd_mounted: true
  when: CYRUS_DATA_DIR in item.mount
  with_items: "{{ ansible_mounts }}"

- name: "Mount drdb device on master"
  ansible.builtin.command: mount "{{ item['device'] }}" "{{ item['mountpoint'] }}"
  with_items: "{{ drbd2_disks }}"
  when: drbd2_master and not drbd_mounted
